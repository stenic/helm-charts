apiVersion: v1
kind: Secret
metadata:
  name: {{ include "openvpn-as.fullname" . }}-configure
type: Opaque
stringData:
  configure-admin.sh: |
    function createUser() {
        echo "==> Creating user ${1} if not exists"
        /usr/local/openvpn_as/scripts/sacli UserPropGet | grep "\"${1}\"" > /dev/null \
            || /usr/local/openvpn_as/scripts/sacli --user ${1} --new_pass ${2} SetLocalPassword
    }
    function configure {
        sleep 60

        echo "==> Configure vpn"
        /usr/local/openvpn_as/scripts/sacli --key "vpn.server.daemon.tcp.port" --value "{{ .Values.openvpn.ports.tcp }}"   ConfigPut
        /usr/local/openvpn_as/scripts/sacli --key "vpn.server.daemon.udp.port" --value "{{ .Values.openvpn.ports.udp }}"   ConfigPut
        /usr/local/openvpn_as/scripts/sacli --key "admin_ui.https.port"        --value "{{ .Values.openvpn.ports.admin }}" ConfigPut
        /usr/local/openvpn_as/scripts/sacli --key "cs.https.port"              --value "{{ .Values.openvpn.ports.gui }}"   ConfigPut

        {{ range $key, $value := .Values.openvpn.config }}
        echo "==> Configure {{ $key }}"
        /usr/local/openvpn_as/scripts/sacli --key "{{ $key }}" --value "{{ $value }}" ConfigPut
        {{ end }}

        echo "==> Configure admin user credentials"
        createUser {{ .Values.openvpn.admin.user }} {{ .Values.openvpn.admin.password }}
        echo "==> Enable admin privileges"
        /usr/local/openvpn_as/scripts/sacli --user {{ .Values.openvpn.admin.user }} --key "prop_superuser" --value "true" UserPropPut
        echo "==> Disable PAM admin"
        sed -i'' 's/boot_pam_users\.0=admin/boot_pam_users\.0=sdfsdfsdf/' /config/etc/as.conf
        echo "==> Delete admin if existing"
        /usr/local/openvpn_as/scripts/sacli  --user admin UserPropDelAll > /dev/null || true

        echo "==> Configure users"
        {{ range .Values.openvpn.users }}
        createUser {{ .user }} {{ .password }}
        {{ end }}

        echo "==> Restarting service"
        kill $(cat /openvpn/pid/openvpn.pid)
    }
    configure &
  99-backup.sh: |
    function backup() {
        cd /config/etc/db || exit
        DBFILESBAK="*.db"
        for f in $DBFILESBAK
        do
          echo "==> Backing up $f"
          sqlite3 "$f" .dump > /backup/"$f"
        done

        echo "==> Backing up as.conf"
        cp /config/etc/as.conf /backup/as.conf
    }
    function delay() {
        sleep 180
        backup
    }
    echo "==> Scheduling startup backup"
    delay & disown

    echo "==> Scheduling hourly backup"
    function backupLoop() {
      while true
      do
        sleep 3600
        backup
      done
    }
    backupLoop & disown
